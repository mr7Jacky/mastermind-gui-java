/* *****************************************
 * CSCI205 - Software Engineering and Design
 * Fall 2019
 * Instructor: Prof. Brian King
 *
 * Name: Jacky Lin
 * Section: 9:00-9:52 AM
 * Date: 10/26/19
 * Time: 2:59 PM
 *
 * Project: lab
 * Package: lab
 * Class: CSCI205
 *
 * Description:
 *
 * ****************************************
 */

package hw02.game.GUI.model;

import hw02.game.chess.Peg;
import hw02.game.chess.PegEnum;
import hw02.game.chess.Token;
import hw02.game.chess.TokenEnum;
import javafx.scene.control.Alert;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;

import java.util.ArrayList;

/**
 * Model class of the Mastermind GUI which contains all objects representation of the components in mastermind,
 * and defined the working logic of the GUI.
 * @author Yida Chen, Jacky Lin
 */
public class MasterMindModel {
    /** the current guess from the user*/
    private ArrayList<Token> currentGuess;
    /** the history data for guesses*/
    private ArrayList<Token> historyTokenGuesses;
    /** the history result for guesses*/
    private ArrayList<Peg> historyPegResult;
    /** the number of turns for the game*/
    private int numOfTurns;
    /** the number of pegs for the game*/
    private int numOfPegs;

    /**
     * Constructor of the Mastermind model
     * @author Yida Chen
     */
    public MasterMindModel() {
        //initialize 3 essential array list for store the data
        this.currentGuess = new ArrayList<>();
        this.historyTokenGuesses = new ArrayList<>();
        this.historyPegResult = new ArrayList<>();
        // the game settings
        this.numOfPegs = 4;
        this.numOfTurns = 12;
        // User guess tokens
        setCurrentGuess();
    }

    /**
     * Set the tokens represent the history board of user`s guess
     * @author Yida Chen
     */
    public void setCurrentGuess() {
        this.currentGuess.clear();
        for (int i = 0; i < this.numOfPegs; i++) {
            this.currentGuess.add(new Token(Color.GRAY));
        }
    }

    /**
     * Getter for the history of the user guesses.
     * @return ArrayList contains Token objects which represent the user`s guesses history
     * @author Yida Chen
     */
    public ArrayList<Token> getCurrentGuess() {
        return currentGuess;
    }

    /**
     * Set the history of the peg result to the user`s guesses.
     * @param pegResult ArrayList of Peg objects which represent the history of peg results to the user`s guesses
     * @author Jacky Lin
     */
    public void setResultPeg(ArrayList<Peg> pegResult) {
        for (Peg p : pegResult) {
            Peg temp = new Peg();
            temp.setCurrentColor(p.getCurrentColor());
            this.historyPegResult.add(temp);
        }
    }

    /**
     * this method help to check if the current guess is valid
     * @return true if it is a valid guess, otherwise return false
     * @author Yida Chen
     */
    public boolean validGuess() {
        for (Token t: this.getCurrentGuess()){
            if (t.getSelectedColor().equals(Color.GRAY)){ return false; }
        }
        return true;
    }

    /**
     * Set the confirmation text based on whether the user is won or not
     * @param win true if user win the game otherwise false
     * @param result confirmation alert gives to the user
     * @author Yida Chen
     */
    public void setConfirmationText(boolean win, Alert result) {
        // If user win the game
        if (win){ result.setContentText("You win the game congrats!"); }
        // If user lose the game
        else { result.setContentText("Sorry you didn't guess out the code, another play?"); }
    }

    /**
     * This method is to reset the the current guess after user use the clear button
     * @author Yida Chen, Jacky Lin
     */
    public void resetCurrentGuess() {
        for (Token t : this.getCurrentGuess()) {
            t.setSelectedColor(Color.GRAY);
            if (t.isSelected()) { t.toggleToken(); }
        }
    }

    /**
     * Check whether user has guessed out the code
     * @param resultPeg Result pegs to check whether user has guessed out the code or not
     * @return true if the user has guessed out the code otherwise false
     * @author Yida Chen
     */
    public boolean guessOutCode(ArrayList<Peg> resultPeg){
        for (Peg peg: resultPeg){
            if(!peg.getCurrentColor().equals(PegEnum.CORRECT.getColor())){ return false; }
        }
        return true;
    }

    /**
     * Get the correct answers to the code
     * @param code Code generated by the mastermind machine
     * @return ArrayList of Circle objects representing the correct answers to the code
     * @author Yida Chen
     */
    public ArrayList<Circle> getCorrectAnswers(TokenEnum[] code) {
        ArrayList<Circle> answers = new ArrayList<>();
        for (TokenEnum tokenEnum: code){
            Circle answer = new Circle(25);
            answer.setFill(tokenEnum.getColor());
            answers.add(answer);
        }
        return answers;
    }

    /**
     * Getter for the user`s guess history
     * @return User`s guess history
     */
    public ArrayList<Token> getHistoryTokenGuesses() {
        return historyTokenGuesses;
    }

    /**
     * Getter for the peg result history to the user`s guesses
     * @return Peg result history
     */
    public ArrayList<Peg> getHistoryPegResult() {
        return historyPegResult;
    }

    /**
     * Getter for the number of turns of the game
     * @return int numbers of turns of the game
     */
    public int getNumOfTurns() {
        return numOfTurns;
    }

    /**
     * Setter for the number of turns in the game
     * @param numOfTurns int numbers of turns in the game to set
     */
    public void setNumOfTurns(int numOfTurns) {
        this.numOfTurns = numOfTurns;
    }

    /**
     * Getter for the number of Pegs in the game
     * @return int represent the number of pegs in the game
     */
    public int getNumOfPegs() {
        return numOfPegs;
    }

    /**
     * Setter for the number of Pegs in the game
     * @param numOfPegs int represent the number of pegs in the game
     */
    public void setNumOfPegs(int numOfPegs) {
        this.numOfPegs = numOfPegs;
    }
}
